
import os

from scrapy.exceptions import IgnoreRequest

from selenium.common.exceptions import TimeoutException
from scrapy.http import HtmlResponse
from selenium import webdriver

#
# For this to work, the Chrome window generated by Selenium
# must remain open since it will show a dialog for user and
# password, where the ones shown below should be used. This
# mechanism will change depending on the provider for the
# proxies. In this case I'm using: https://luminati.io
#
USER = 'lum-customer-hl_009d2ef0-zone-flatfooted'
PASSWORD = 'vbkwv41rbgml'


class SeleniumMiddleware(object):

    def __init__(self):
        # This URL is provided by https://luminati.io, and it acts
        # as a reverse proxy (meaning that you will only send requests
        # to this proxy, and they will in turn relay that with another
        # proxy in the backend). If you don't want a proxy don't pass
        # one as an argument.
        self.driver = SeleniumDriver('http://zproxy.luminati.io:22225').driver
        # self.driver = SeleniumDriver().driver

    def process_request(self, request, spider):
        try:
            self.driver.get(request.url)
        except TimeoutException:
            raise IgnoreRequest()
        self._wait_for_page(self.driver, spider, request)
        return HtmlResponse(
            self.driver.current_url,
            body=self.driver.page_source,
            encoding='UTF-8',
            request=request
        )

    def _wait_for_page(self, driver, spider, request):
        try:
            driver.find_element_by_class_name('PageNm')
        except:
            pass


class SeleniumDriver:

    def __init__(self, proxy=None):
        options = webdriver.ChromeOptions()
        # Must not be headless to provide login credentials
        # options.add_argument('headless')
        if proxy:
            options.add_argument('--proxy-server={}'.format(proxy))
            print('-' * 100)
            print('Selenium using proxy: {}'.format(proxy))
            print('-' * 100)
        self._driver = webdriver.Chrome(
            '{}/../../../../../utilities/chromedriver'.format(
                os.path.dirname(os.path.realpath(__file__))),
            chrome_options=options)
        self._driver.set_page_load_timeout(90)
        self._driver.implicitly_wait(60)

    @property
    def driver(self):
        return self._driver
